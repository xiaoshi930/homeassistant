全局函数:
  styles:          
    card:                                                                                                                                                                                                             
      - function2: |                                                     
          [[[         
                /***************************************************************
                * 全局函数  主UI的grid的布局                                     *
                * 调用方式  grid_空白() grid_图片() grid_视频() grid_全屏视频()   *
                ****************************************************************/
                window.grid_空白 = function()  {
                    return   `"空白1 空白2 空白2 空白3"         
                              "空白1 空白2 空白2 主题按钮"        
                              "空白1 空白2 空白2 预留按钮1"       
                              "空白1 空白2 空白2 预留按钮2"                         
                              "空白1 表头 表头 表头"                          
                              "空白1 动态区域 动态区域 动态区域"                         
                              "空白1 第1区域 第2区域 第2区域"   
                              "空白1 第3区域 第4区域 第4区域" 
                              "空白1 第5区域 第6区域 第6区域" 
                              "空白1 第7区域 第8区域 第8区域"     
                              "空白1 表尾 表尾 表尾"`;
                }               
                window.grid_图片 = function()  {
                    return   `"图片 图片 图片 图片"         
                              "空白1 空白2 空白2 主题按钮"         
                              "空白1 空白2 空白2 预留按钮1"       
                              "空白1 空白2 空白2 预留按钮2"                         
                              "空白1 表头 表头 表头"                     
                              "空白1 动态区域 动态区域 动态区域"                         
                              "空白1 第1区域 第2区域 第2区域"   
                              "空白1 第3区域 第4区域 第4区域" 
                              "空白1 第5区域 第6区域 第6区域" 
                              "空白1 第7区域 第8区域 第8区域"     
                              "空白1 表尾 表尾 表尾"`; 
                }               
                window.grid_视频 = function()  {
                    return   `"视频 视频 视频 视频"         
                              "空白1 空白2 空白2 主题按钮"       
                              "空白1 空白2 空白2 预留按钮1"       
                              "空白1 空白2 空白2 预留按钮2"                           
                              "空白1 表头 表头 表头"                     
                              "空白1 动态区域 动态区域 动态区域"                         
                              "空白1 第1区域 第2区域 第2区域"   
                              "空白1 第3区域 第4区域 第4区域" 
                              "空白1 第5区域 第6区域 第6区域" 
                              "空白1 第7区域 第8区域 第8区域"     
                              "空白1 表尾 表尾 表尾"`;
                }             
                window.grid_全屏视频 = function()  {
                    return   `"视频 视频 视频 视频"          
                              "空白1 空白2 空白2 主题按钮"`;
                }
                
                /***************************************************************
                * 全局函数  返回对应主题状态。                                   *
                * 调用方式  theme()                                             *
                * 返回结果  "on" 或者 "off"                                     * 
                ****************************************************************/
                window.theme = function() {  
                    if (hass.user.name == name1) { 
                        return states[number1]?.state % 2 ? "on" : "off"; 
                    } 
                    if (hass.user.name == name2) { 
                        return states[number2]?.state % 2 ? "on" : "off"; 
                    }                           
                }               
                                            
                /***************************************************************
                * 全局函数  返回对应主题颜色                                     *
                * 调用方式  theme_color(255,56,0.8)                             *
                * 返回结果  "rgb(255,255,255,0.8)" 或者 "rgb(56,56,56,0.8)"     * 
                ****************************************************************/
                window.theme_color = function(color1, color2, opacity) {
                    if (hass.user.name == name1) {
                        const color = states[number1]?.state % 2 ? color1 : color2;
                        return `rgb(${[color,color,color].join()}${states[number1]?.state > 2 ? `,${opacity}` : ""})`;
                    }
                    if (hass.user.name == name2) {
                        const color = states[number2]?.state % 2 ? color1 : color2;
                        return `rgb(${[color,color,color].join()}${states[number2]?.state > 2 ? `,${opacity}` : ""})`;
                    } 
                }        
    
                /***************************************************************
                * 全局函数  返回对应主题边框                                     *
                * 调用方式  theme_border(255,56,0.8)                            *
                * 返回结果  "1px solid rgb(255,255,255,0.8)" 或者               *
                * 返回结果  "1px solid rgb(56,56,56,0.8)"                       *
                ****************************************************************/
                window.theme_border = function(color1, color2, opacity) {
                    if (hass.user.name === name1) {
                        return states[number1]?.state <= 2 ? "0" 
                            : `1px solid rgb(${Array(3).fill(states[number1]?.state % 2 ? color1 : color2).join()},${opacity})`;
                    }
                    if (hass.user.name === name2) {
                        return states[number2]?.state <= 2 ? "0" 
                            : `1px solid rgb(${Array(3).fill(states[number2]?.state % 2 ? color1 : color2).join()},${opacity})`;
                    }
                }                       

                /***************************************************************
                * 全局函数  返回对应主题颜色的不同透明度（1234不透明、5678取透明值）*
                * 调用方式  theme_opacity('0,100,200','0.5')                    *
                * 返回结果  "rgb(0,100,200,1)" 或者 "rgb(0,100,200,0.5)"        *
                ****************************************************************/
                window.theme_opacity = function(color ,opacity) {
                    if (hass.user.name == name1) {
                        return states[number1]?.state <= 2 ? `rgb(${color})` : `rgb(${color},${opacity})`;
                    }
                    if (hass.user.name == name2) {
                        return states[number2]?.state <= 2 ? `rgb(${color})` : `rgb(${color},${opacity})`;
                    }       
                }                            

                /***************************************************************
                * 全局函数  弹出菜单（browser-popup-card）的公共主题样式          *
                * 调用方式  theme_none()                                        *
                ****************************************************************/
                window.theme_none = function(){ 
                      return `--popup-min-width: 100vw;
                              --mdc-theme-surface: rgb(0,0,0,0);
                              --dialog-backdrop-filter: blur(10px) brightness(1);
                              --ha-card-background: rgb(0,0,0,0);
                              --ha-card-border-width: 0; 
                             ` 
                }  

                /***************************************************************
                * 全局函数  弹出菜单（browser-popup-card）的头像部分样式          *
                * 调用方式  theme_none_touxiang(home)                           *
                ****************************************************************/
                window.theme_none_touxiang = function(home){ 
                    const color = home ==="home" ? "rgb(0,200,200)" : "rgb(200,0,0)"
                    if (theme()=='on'){
                      return `--popup-min-width: 100vw;
                              --mdc-theme-surface: rgb(0,0,0,0);
                              --dialog-backdrop-filter: blur(10px) brightness(1);
                              --ha-card-background: rgb(0,0,0,0);
                              --ha-card-border-width: 0; 
                              --map-filter: "";
                              --mdc-icon-button-size: 30px;
                              --state-person: ${color} ;
                              `
                    }
                    if (theme()=='off'){
                      return `--popup-min-width: 100vw;
                              --mdc-theme-surface: rgb(0,0,0,0);
                              --dialog-backdrop-filter: blur(10px) brightness(1);
                              --ha-card-background: rgb(0,0,0,0);
                              --ha-card-border-width: 0; 
                              --mdc-icon-button-size: 30px;
                              --state-person: ${color};
                              --map-filter: invert(.9) hue-rotate(170deg) brightness(2.5) contrast(2) saturate(.3);
                              `
                    }  
                }  
                /***************************************************************
                * 全局函数  弹出菜单（browser-popup-card）的公共主题样式          *
                * 额外屏蔽  垂直卡片（vertical-stack）的各个卡片之间的间距         *
                * 调用方式  theme_none_pupup()                                        *
                ****************************************************************/
                window.theme_none_pupup = function(){  
                    return `--popup-min-width: 100vw;
                            --mdc-theme-surface: rgb(0,0,0,0);
                            --dialog-backdrop-filter: blur(10px) brightness(1);
                            --ha-card-background: rgb(0,0,0,0);
                            --ha-card-border-width: 0;
                            --vertical-stack-card-gap: 0;`
                }

                /***************************************************************
                * 全局函数  蘑菇卡片（mushroom-card）兼容theme()函数的公共主题样式 *
                * 调用方式  theme_mushroom()                                    *
                ****************************************************************/
                window.theme_mushroom = function(){  
                    if (theme()=='on'){
                      return `--popup-min-width: 100vw;
                              --mdc-theme-surface: rgb(0,0,0,0);
                              --dialog-backdrop-filter: blur(10px) brightness(1);
                              --ha-card-background: rgb(255,255,255);
                              --ha-card-header-color: rgb(0,0,0);
                              --primary-text-color: rgb(0,0,0);
                              --ha-card-border-color: rgb(0,0,0,0);
                              `
                    }
                    if (theme()=='off'){
                      return `--popup-min-width: 100vw;
                              --mdc-theme-surface: rgb(0,0,0,0);
                              --dialog-backdrop-filter: blur(10px) brightness(1);
                              --ha-card-background: rgb(50,50,50);
                              --ha-card-header-color: rgb(255,255,255);
                              --primary-text-color: rgb(255,255,255);
                              --ha-card-border-color: rgb(0,0,0,0);
                              `
                    }  
                }  

                /***************************************************************
                * 全局函数  气泡卡片（bubble-card）兼容theme()函数的公共主题样式   *
                * 调用方式  theme_bubble()                                      *
                ****************************************************************/
                window.theme_bubble = function(){  
                    if (theme()=='on'){
                      return `--popup-min-width: 100vw;
                              --mdc-theme-surface: rgb(0,0,0,0);
                              --dialog-backdrop-filter: blur(10px) brightness(1);
                              --secondary-background-color: rgb(255,255,255);
                              --card-background-color: rgb(220,220,220);
                              --accent-color: rgb(100,100,100);
                              --text-light-primary-color: rgb(0,0,0);
                              --primary-text-color: rgb(0,0,0);
                              --mdc-theme-text-primary-on-background: rgb(0,0,0);
                              --bubble-state-climate-fan-only-color: rgb(0,188,213);
                              --bubble-state-climate-dry-color: rgb(255,151,0);
                              --bubble-state-climate-cool-color: rgb(33,150,243);
                              --bubble-state-climate-heat-color: rgb(254,111,33);
                              --bubble-light-color: rgb(250,115,50);
                              --bubble-media-player-icon-background-color: rgb(220,220,220);
                              --bubble-accent-color: rgb(220,220,220);
                              `
                    }
                    if (theme()=='off'){
                      return `--popup-min-width: 100vw;
                              --mdc-theme-surface: rgb(0,0,0,0);
                              --dialog-backdrop-filter: blur(10px) brightness(1);
                              --secondary-background-color: rgb(50,50,50);
                              --card-background-color: rgb(50,50,50);
                              --accent-color: rgb(200,200,200);
                              --text-light-primary-color: rgb(255,255,255);
                              --primary-text-color: rgb(255,255,255);
                              --mdc-theme-text-primary-on-background: rgb(255,255,255);
                              --bubble-state-climate-fan-only-color: rgb(0,188,213);
                              --bubble-state-climate-dry-color: rgb(255,151,0);
                              --bubble-state-climate-cool-color: rgb(33,150,243);
                              --bubble-state-climate-heat-color: rgb(254,111,33);
                              --bubble-light-color: rgb(250,115,50);
                              --bubble-media-player-icon-background-color: rgb(50,50,50);
                              --bubble-accent-color: rgb(50,50,50);
                              `
                    }
                }  

                /***************************************************************
                * 全局函数  返回图表卡片（apexcharts-card）集成的card_mode样式    *
                * 调用方式  theme_apexcharts()                                  *
                ****************************************************************/
                window.theme_apexcharts = function(){
                    const label_on = `
                      ha-card {
                        background: rgb(255,255,255);
                        --card-background-color: rgb(255,255,255);
                        --primary-background-color: rgb(255,255,255);
                        color: rgb(50,50,50);
                        --primary-text-color: rgb(50,50,50);
                        box-shadow: none;
                        font-size: 1rem;
                      }
                      text {
                        fill: rgb(50,50,50);
                      }
                    `; 
                    const label_off = `
                      ha-card { 
                        background: rgb(50,50,50);
                        --card-background-color: rgb(50,50,50);
                        --primary-background-color: rgb(50,50,50);
                        color: rgb(255,255,255);  
                        --primary-text-color: rgb(255,255,255);
                        font-size: 1rem;
                      }     
                      text {    
                          fill: rgb(255,255,255);                   
                      }
                    `; 
                    if (hass.user.name == name1) { 
                        return states[number1]?.state % 2 == 1 ? label_on : label_off;
                    } 
                    if (hass.user.name == name2) { 
                        return states[number2]?.state % 2 == 1 ? label_on : label_off;
                    }    
                }       

                /***************************************************************
                * 全局函数  返回markdown卡片（markdown-card）集成的card_mode样式  *
                * 调用方式  theme_markdown()                                    *
                ****************************************************************/
                window.theme_markdown = function(){
                    const label_on = `
                      ha-card{
                        background: rgb(0,0,0,0);
                        border-width: 0;
                        padding: 0 0 0 0;
                      }
                      ha-markdown {
                          padding: 0 0 0 0;
                          text-align: start;
                          font-weight: bold;
                          font-size: 2vh;
                          white-space: nowrap;
                          color: rgb(0,0,0);
                      }
                    `; 
                    const label_off = `
                      ha-card{
                        background: rgb(0,0,0,0);
                        border-width: 0;
                        padding: 0 0 0 0;
                      }
                      ha-markdown {
                          padding: 0 0 0 0;
                          text-align: start;
                          font-weight: bold;
                          font-size: 2vh;
                          white-space: nowrap;
                          color: rgb(255,255,255);
                      }
                    `; 
                    if (hass.user.name == name1) { 
                        return states[number1]?.state % 2 == 1 ? label_on : label_off;
                    } 
                    if (hass.user.name == name2) { 
                        return states[number2]?.state % 2 == 1 ? label_on : label_off;
                    }    
                }  

                /***************************************************************
                * 全局函数  电池卡片（battery-state）集成的card_mode样式          *
                * 调用方式  theme_battery()                                     *
                ****************************************************************/
                window.theme_battery = function(){
                    const label_on = `
                      ha-card{
                        border-width: 0;
                        padding: 0;
                        color: rgb(0,0,0);
                        text-align: start;
                      }
                    `; 
                    const label_off = `
                      ha-card{
                        border-width: 0;
                        padding: 0;
                        color: rgb(255,255,255);
                        text-align: start;
                      }
                    `; 
                    if (hass.user.name == name1) { 
                        return states[number1]?.state % 2 == 1 ? label_on : label_off;
                    } 
                    if (hass.user.name == name2) { 
                        return states[number2]?.state % 2 == 1 ? label_on : label_off;
                    }    
                }  

                /***************************************************************
                * 全局函数  地图卡片（map）集成的card_mode样式                    *
                * 调用方式  theme_ha_map(entity)                                *
                ****************************************************************/
                window.theme_ha_map = function(entity){
                    const entityState = states[entity] || {};
                    const time1 = entityState.attributes?.驾车通勤时间 || "0";
                    const dis1 = entityState.attributes?.驾车通勤距离 || "0";
                    const time2 = entityState.attributes?.公交通勤时间 || "0";
                    const dis2 = entityState.attributes?.公交通勤距离 || "0";
                    const label_on = ` 
                      .leaflet-control-attribution {
                        background: rgb(0,0,0,0) !important;
                        font-size: 0px; 
                      } 
                      .leaflet-control-zoom-in,
                      .leaflet-control-zoom-out {
                        border-radius: 20% !important;
                        padding: 0px;
                        background: rgb(0,0,0,0.2) !important;
                        margin: 0px 0px 0px;
                        border: 1px solid rgb(255,255,255,0.5) !important;
                      } 
                      .leaflet-container:after {
                        content: "驾车：回家距离${dis1}，预计时间${time1}\\a公交：回家距离${dis2}，预计时间${time2}";
                        color: rgb(0,0,0);
                        font-weight: bold; 
                        font-size: 10px;
                        position: absolute; 
                        text-align: left;
                        right: 10px;
                        bottom: 1px;
                        width: 55%;
                        font-variant-numeric: tabular-nums;
                        white-space: pre;
                      }
                      .leaflet-control-zoom {
                        border: none !important;
                      }
                      .leaflet-bar a{
                        color: white !important;
                      }
                    `; 
                    const label_off = ` 
                      .leaflet-control-attribution {
                        background: rgb(0,0,0,0) !important;
                        font-size: 0px;
                      }
                      .leaflet-control-zoom-in,
                      .leaflet-control-zoom-out {
                        border-radius: 20% !important;
                        padding: 0px;
                        background: rgb(0,0,0,0.2) !important;
                        margin: 0px 0px 0px;
                        border: 1px solid rgb(255,255,255,0.5) !important;
                      } 
                      .leaflet-container:after {
                        content: "驾车：回家距离${dis1}，预计时间${time1}\\a公交：回家距离${dis2}，预计时间${time2}";
                        color: rgb(255,255,255);
                        font-weight: bold; 
                        font-size: 10px;
                        position: absolute; 
                        text-align: left;
                        right: 10px;
                        bottom: 1px;
                        width: 55%;
                        font-variant-numeric: tabular-nums;
                        white-space: pre;
                      }
                      .leaflet-control-zoom {
                        border: none !important;
                      }
                      .leaflet-bar a{
                        color: white !important;
                      }
                    `; 
                    const label = ` 
                      .leaflet-control-attribution {
                        background: rgb(0,0,0,0) !important;
                        font-size: 0px;
                      }
                      .leaflet-control-zoom-in,
                      .leaflet-control-zoom-out {
                        border-radius: 20% !important;
                        padding: 0px;
                        background: rgb(0,0,0,0.2) !important;
                        margin: 0px 0px 0px;
                        border: 1px solid rgb(255,255,255,0.5) !important;
                      } 
                      .leaflet-control-zoom {
                        border: none !important;
                      }
                      .leaflet-bar a{
                        color: white !important;
                      }
                    `; 
                    if(states[entity]) return theme()=="on" ? label_on : label_off;
                    else return label;
                }
          ]]] 
  
      - cursor: none      
      - --mdc-ripple-press-opacity: 0                 
      - padding: 0 0 0 0      
      - border-width: 0         
      - border-radius: 0             
      - width: 100vw           
      - height: 100vh  
